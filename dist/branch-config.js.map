{"version":3,"file":"branch-config.js","sourceRoot":"","sources":["../src/branch-config.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,IAAI,MAAM,eAAe,CAAC;AACtC,OAAO,KAAK,MAAM,MAAM,iBAAiB,CAAC;AAC1C,OAAO,KAAK,IAAI,MAAM,SAAS,CAAC;AAChC,OAAO,EAAE,eAAe,EAAE,MAAM,UAAU,CAAC;AAS3C,SAAS,SAAS,CAAC,QAAiB;IAClC,OAAO,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAmB,CAAC;AAC/C,CAAC;AAED,SAAS,aAAa,CAAC,QAAuB,EAAE,QAAiB;IAC/D,OAAO,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC;QACpC,KAAK,EAAE,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK;QAChC,IAAI,EAAE,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI;QAC9B,IAAI,EAAE,QAAQ;QACd,GAAG,EAAE,MAAM,CAAC,OAAO,CAAC,GAAG;KACxB,CAAC;SACC,IAAI,CAAC,CAAC,IAAU,EAAE,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC;AACzF,CAAC;AAED,MAAM,UAAU,iBAAiB,CAAC,QAAuB;IACvD,IAAI;QACF,MAAM,UAAU,GAAG,IAAI,CAAC,QAAQ,CAAC,oBAAoB,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC;QAE3E,OAAO,aAAa,CAAC,QAAQ,EAAE,UAAU,CAAC;aACvC,IAAI,CAAC,SAAS,CAAC;aACf,KAAK,CAAC,CAAC,GAAS,EAAE,EAAE;YACnB,OAAO,OAAO,CAAC,MAAM,CAAC,IAAI,eAAe,CAAC,4CAA4C,UAAU,OAAO,GAAG,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;QACzH,CAAC,CAAC,CAAC;KACN;IAAC,OAAM,GAAS,EAAE;QACjB,OAAO,OAAO,CAAC,MAAM,CAAC,IAAI,eAAe,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC;KACzD;AACH,CAAC;AAED,MAAM,UAAU,eAAe,CAAC,QAAuB;IACrD,MAAM,QAAQ,GAAG,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,YAAY,IAAI,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,MAAM,CAAC;IAEnG,IAAI,CAAC,QAAQ,EAAE;QACb,OAAO,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,wDAAwD,CAAC,CAAC,CAAC;KAC5F;IAED,OAAO,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC;QAC7B,KAAK,EAAE,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK;QAChC,IAAI,EAAE,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI;QAC9B,WAAW,EAAE,QAAQ;KACtB,CAAC;SACC,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC;SAC/B,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AACrC,CAAC","sourcesContent":["import * as core from \"@actions/core\";\nimport * as github from \"@actions/github\";\nimport * as yaml from \"js-yaml\";\nimport { ConfigFileError } from \"./errors\";\n\ntype GHClientType = ReturnType<typeof github.getOctokit>;\n\nexport interface IBranchMapping {\n  [branch: string]: Array<String>;\n}\n\n\nfunction parseYaml(fileData : string) {\n  return yaml.load(fileData) as IBranchMapping;\n}\n\nfunction getConfigFile(ghClient : GHClientType, filepath : string) {\n  return ghClient.rest.repos.getContent({\n    owner: github.context.repo.owner,\n    repo: github.context.repo.repo,\n    path: filepath,\n    ref: github.context.sha\n  })\n    .then((resp : any) => Buffer.from(resp.data.content, resp.data.encoding).toString());\n}\n\nexport function getBranchMappings(ghClient : GHClientType) : Promise<IBranchMapping> {\n  try {\n    const configPath = core.getInput(\"configuration-path\", { required: true });\n\n    return getConfigFile(ghClient, configPath)\n      .then(parseYaml)\n      .catch((err : any) => {\n        return Promise.reject(new ConfigFileError(`Unable to parse configuration-path file: ${configPath}\\n\\n${err.message}`));\n      });\n  } catch(err : any) {\n    return Promise.reject(new ConfigFileError(err.message));\n  }\n}\n\nexport function getTargetBranch(ghClient : GHClientType) {\n  const prNumber = github.context.payload.pull_request && github.context.payload.pull_request.number;\n\n  if (!prNumber) {\n    return Promise.reject(new Error(\"Unable to determine pull request from workflow context\"));\n  }\n\n  return ghClient.rest.pulls.get({\n    owner: github.context.repo.owner,\n    repo: github.context.repo.repo,\n    pull_number: prNumber\n  })\n    .then(response => response.data)\n    .then(prData => prData.base.ref);\n}\n"]}