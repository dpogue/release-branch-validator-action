{"version":3,"file":"issue-fetcher.js","sourceRoot":"","sources":["../src/issue-fetcher.ts"],"names":[],"mappings":"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","sourcesContent":["import * as core from \"@actions/core\";\nimport * as github from \"@actions/github\";\nimport * as httpm from \"@actions/http-client\";\nimport { MissingIssueError } from \"./errors\";\n\ntype GHClientType = ReturnType<typeof github.getOctokit>;\ntype Unwrap<T> = T extends PromiseLike<infer U> ? U : T;\ntype GHCommitListType = Unwrap<ReturnType<GHClientType[\"rest\"][\"pulls\"][\"listCommits\"]>>[\"data\"];\ntype CommitIssueMap = Array<[string, Array<string>|null]>;\nexport type IIssueLabelMapping = Array<[string, Array<string>]>;\n\ninterface JiraIssue {\n  id: string;\n  self: string;\n  key: string;\n  fields: {\n    labels?: Array<string>\n  };\n}\n\ninterface JiraIssuesResponse {\n  issues: Array<JiraIssue>\n}\n\nconst jiraIssueRegex = /([a-zA-Z0-9]+-[0-9]+)/g;\n\n\nfunction getCommits(ghClient : GHClientType) {\n  const prNumber = github.context.payload.pull_request && github.context.payload.pull_request.number;\n\n  if (!prNumber) {\n    return Promise.reject(new Error(\"Unable to determine pull request from workflow context\"));\n  }\n\n  return ghClient.rest.pulls.listCommits({\n    owner: github.context.repo.owner,\n    repo: github.context.repo.repo,\n    pull_number: prNumber\n  })\n    .then(response => response.data);\n}\n\nfunction mapCommitsToIssueIDs(commits : GHCommitListType) {\n  return commits.map(commit => [commit.sha, commit.commit.message.match(jiraIssueRegex)]) as CommitIssueMap;\n}\n\nfunction validateIssues(commits : CommitIssueMap) {\n  const missingRefs = commits.filter(([sha, issues]) => issues === null).map(([sha, issues]) => sha);\n\n  if (missingRefs.length > 0) {\n    throw new MissingIssueError(\"Some commits are missing Jira issue references\", missingRefs);\n  }\n\n  // Return the unique list of all referenced issue IDs\n  return [...new Set(commits.reduce((acc, [sha, commits]) => acc.concat(commits || []), [] as Array<string>))];\n}\n\nfunction requestJiraIssues(issues : Array<string>) {\n  const jiraEndpoint = core.getInput(\"jira-endpoint\", { required: true });\n  const jiraAuthToken = core.getInput(\"jira-token\", { required: true });\n\n  const http = new httpm.HttpClient();\n  return http.postJson<JiraIssuesResponse>(`${jiraEndpoint}/rest/api/2/search`, {\n    jql: `issuekey in (${issues.join(',')})`,\n    fields: [\"key\",\"labels\"]\n  }, {\n    Authorization: `Basic ${jiraAuthToken}`\n  })\n    .then(response => {\n      if (response.statusCode !== 200) {\n        return Promise.reject(new Error(\"Jira request failed: \" + JSON.stringify(response.result)));\n      } else {\n        return response.result!;\n      }\n    });\n}\n\nfunction mapIssuesToLabels(response : JiraIssuesResponse) {\n  return response.issues.map(issue => [issue.key, (issue.fields && issue.fields.labels) || []]) as IIssueLabelMapping;\n}\n\nexport function getCommitIssueLabels(ghClient : GHClientType) {\n  return getCommits(ghClient)\n    .then(mapCommitsToIssueIDs)\n    .then(validateIssues)\n    .then(requestJiraIssues)\n    .then(mapIssuesToLabels);\n}\n"]}